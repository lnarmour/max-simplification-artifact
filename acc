#!/bin/bash

# acc - (A)lpha to (C) (C)ompiler
#
# This script wraps the Alpha codegen functionality and gcc. Given a simple input Alpha
# program, it produces the demand driven C code from the new (v2) AlphaZ and the supporting
# wrapper, makefile, and verification code from the old (v1) AlphaZ. Then it compiles
# everything with gcc.
# 

BASE_DIR=`dirname $0`
BASE_NAME=`basename $0`

# exit if any intermediate steps fail
#set -e

function usage {
  echo "usage:" 
  echo "  acc [-m] [-o out_dir] [-l | --face-lattice DOMAIN] [--i]"
  echo "      [-s [--target-complexity] [--num-simplifications] [--try-splitting]]"
  echo "      [ALPHA_FILE]"
  echo "options:"
  echo "    -o,  --out-dir             : Directory in which to place the output files, if the"
  echo "                                 path does not exist then it will be created."
  echo "                                 (default: ./<system_name>/)"
  echo "    -d,  --data-type           : Data type to use for program variables, may be 'int',"
  echo "                                 'long', 'float', or 'double' (default: 'float')"
  echo "    -m,  --make                : Run make to build the generated files. Note, this may"
  echo "                                 fail if both v1 and v2 files have not been generated."
  echo "                                 Cannot be used with -s since multiple versions may be"
  echo "                                 generated. (default: false)"
  echo "    -s,  --simplify            : Run the simplifying reductions algorithm on v2 input"
  echo "                                 (default: false)"
  echo "         --num-simplifications : Stop after a number of simplifications is found, or the"
  echo "                                 exploration terminates, whichever comes first. The value"
  echo "                                 of 0 tries to find all simplifications. (default: 1)"
  echo "         --target-complexity   : Target simplified complexity (default: one less than"
  echo "                                 the input program's complexity)"
  echo "         --try-splitting       : Consider splits during simplification (default: false)"
  echo "    -l                         : Build and show the face lattice for all reductions in"
  echo "                                 the input program. Ignored if --face-lattice specified."
  echo "         --face-lattice        : Build and show the face lattice for the DOMAIN. The"
  echo "                                 value of DOMAIN should be an isl basic set string."
  echo "    -i,  --illustrate          : Illustrate working example from Section 3.3 of the paper."
  echo "    -v,  --verbose             : Emit debug information during simplification exploration"
  echo "arguments:"
  echo "    ALPHA_FILE                 : Input Alpha file used to generate main ystem, makefile,"
  echo "                                 wrapper, and verification files."
  echo ""
}

function assert_is_file_if_non_null {
  filepath=$1
  if [[ -n "$filepath" && ! -f "$filepath" ]]; then
    echo "[$BASE_NAME]: error '$filepath' does not appear to be a regular file, exiting"
    exit 1
  fi
}

function assert_file_created {
  file_name=$1
  if [[ ! -f $file_name ]]; then
    echo "[$BASE_NAME]: error, failed to create the file '$file_name', exiting"
    exit 1
  fi
  echo "[$BASE_NAME]: created '$file_name' file" 
}

function assert_dependency_exists {
  dep=$1
  if [[ -z "$(which $dep)" ]]; then
    echo "[$BASE_NAME]: error, the utility '$dep' is required but cannot be found in the PATH, exiting"
    exit 1
  fi
}

function assert_dependencies_exist {
  assert_dependency_exists java
  assert_dependency_exists make
  assert_dependency_exists cc
}

function parse_system_name {
  file_name=$1
  cat $file_name | grep affine | head -n1 | sed 's~.*affine \([^ ][^ ]*\) .*~\1~'
}

#######################################################################
# arg parsing and preprocessing
#######################################################################

out_dir='.'
data_type='float'

params=""
while (( "$#" )); do
  case "$1" in
    -h|--help)
      usage;
      exit 0;
      ;;
    -m|--make)
      MAKE=1;
      shift 1
      ;;
    -s|--simplify)
      simplify=1;
      shift 1
      ;;
    -i|--illustrate)
      illustrate=1;
      shift 1
      ;;
    --try-splitting)
      try_splitting=1;
      shift 1
      ;;
    -v|--verbose)
      verbose=1;
      shift 1
      ;;
    --num-simplifications)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        num_simplifications=$2
        shift 2
      else
        echo "argument missing for -- $1" >&2
        exit 1
      fi
      ;;
    --target-complexity)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        target_complexity=$2
        shift 2
      else
        echo "argument missing for -- $1" >&2
        exit 1
      fi
      ;;
    -v1|--gen-v1-from)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        v1_file=$2
        shift 2
      else
        echo "argument missing for -- $1" >&2
        exit 1
      fi
      ;;
    -v2|--gen-v2-from)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        v2_file=$2
        shift 2
      else
        echo "argument missing for -- $1" >&2
        exit 1
      fi
      ;;
    -l)
      face_lattice=1
      shift 1
      ;;
    --face-lattice)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        face_lattice=1
        face_lattice_str=$2
        shift 2
      else
        echo "argument missing for -- $1" >&2
        exit 1
      fi
      ;;
    -o|--out-dir)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        out_dir=$2
        shift 2
      else
        echo "argument missing for -- $1" >&2
        exit 1
      fi
      ;;
    -d|--data-type)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        data_type=$2
        if [[ "$data_type" != 'int' && "$data_type" != 'long' && "$data_type" != 'float' && "$data_type" != 'double' ]]; then
          echo "'$data_type' is not a recognized data type"
          usage
          exit 1
        fi
        shift 2
      else
        echo "argument missing for -- $1" >&2
        exit 1
      fi
      ;;
    -u|--substitute)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        substitute=$2
        shift 2
      else
        echo "argument missing for -- $1" >&2
      fi
      ;;
    -*|--*=) # unsupported flags
      echo "unrecognized option -- $(echo $1 | sed 's~^-*~~')" >&2
      usage;
      exit 1
      ;;
    *) # preserve positional arguments
      params="$params $1"
      shift
      ;;
  esac
done

eval set -- "$params";

# assert that at least one input alpha file was specified
if [[ -z "$v1_file" && -z "$v2_file" && -z "$1" && -z "$face_lattice" && -z "$illustrate" ]]; then
  echo "No input alpha_file was specified"
  usage
  exit 1
fi

# Assert that the args passed as files are actually files
assert_is_file_if_non_null $v1_file
assert_is_file_if_non_null $v2_file

assert_is_file_if_non_null $1
# if [[ ! -f $1 ]]; then
#   echo "Excpeting a regular file, '$params' is not a regular file"
#   exit 1
# fi

# Generate new writeC if a v2 file is specifed or if the default positional
# arg $1 is specified. Similary, generate old supportingC if a v1 file is
# specified or if the default positional arg is specified.

v1_gen_alpha_file=$1
gen_legacy_supportingC=$1
if [[ -n "$v1_file" ]]; then
  v1_gen_alpha_file=$v1_file;
  gen_legacy_supportingC=1
fi

v2_gen_alpha_file=$1
gen_new_writeC=$1
if [[ -n "$v2_file" ]]; then
  v2_gen_alpha_file=$v2_file;
  gen_new_writeC=1
fi


# check and exit if dependencies are not available
assert_dependencies_exist

# make out directory if it doesn't already exist
if [[ -n "$out_dir" && -n "$1" ]]; then
  system_name=`parse_system_name $v2_gen_alpha_file`
  if [[ -z "$system_name" ]]; then
    echo "[$BASE_NAME]: error, failed to parse system name from input program, check that syntax is correct."
    exit 1
  fi
  out_dir="$out_dir/$system_name"
fi
mkdir -p $out_dir

#######################################################################
# face lattice
#######################################################################
if [[ -n "$face_lattice" || -n "$illustrate" ]]; then
  export ACC_ALPHA_FILE=$v2_gen_alpha_file \
         ACC_FACE_LATTICE="$face_lattice" \
         ACC_FACE_LATTICE_STR="$face_lattice_str" \
         ACC_ILLUSTRATE_WORKING_EX="$illustrate" \
         ACC_OUT_DIR=$out_dir
  java -jar ${BASE_DIR}/lib/alpha.glue.v2.jar
  exit 0
fi

#######################################################################
# codegen - system C file
#######################################################################

if [[ -n "$gen_new_writeC" || -n "$face_lattice" ]]; then
  # grab the system name from the alpha_file
  system_name=`parse_system_name $v2_gen_alpha_file`
  
  # using v2 alpha, create the v1 *.ab file and new system demand driven *.c file
  echo "[$BASE_NAME]: reading '$v2_gen_alpha_file' file"
  export ACC_ALPHA_FILE=$v2_gen_alpha_file \
         ACC_OUT_DIR=$out_dir \
         ACC_SIMPLIFY=$simplify \
         ACC_NUM_SIMPLIFICATIONS=$num_simplifications \
         ACC_TARGET_COMPLEXITY=$target_complexity \
         ACC_TRY_SPLITTING=$try_splitting \
         ACC_VERBOSE=$verbose \
         ACC_BASE_DATATYPE=$data_type \
         ACC_FACE_LATTICE="$face_lattice" \
         ACC_SUBSTITUTE=$substitute
  java -jar ${BASE_DIR}/lib/alpha.glue.v2.jar
  statuz="$?"
  if [[ -z "$simplify" ]]; then
    assert_file_created ${out_dir}/${system_name}.c
  else
    # there should be at least one simplified file
    if [[ "$statuz" != "0" ]]; then exit 1; fi
    for f in ${out_dir}/simplifications/*/*.alpha
    do
      vx=`echo $f | sed 's~.*/v\([0-9]*\)/.*~v\1~'`
      assert_file_created ${out_dir}/simplifications/$vx/${system_name}.c
    done
  fi
fi

#######################################################################
# codegen - wrapper & verify C files and Makefile
#######################################################################

if [[ -n "$gen_legacy_supportingC" ]]; then
  # grab the system name from the alpha_file
  system_name=`parse_system_name $v1_gen_alpha_file`

  # generate *.ab file
  echo "[$BASE_NAME]: reading '$v1_gen_alpha_file' file"
  export ACC_ALPHA_FILE=$v1_gen_alpha_file \
         ACC_OUT_DIR=$out_dir \
         ACC_LEGACY_SAVE=1 \
         ACC_BASE_DATATYPE=$data_type
  export -n ACC_SIMPLIFY
  java -jar ${BASE_DIR}/lib/alpha.glue.v2.jar
  assert_file_created ${out_dir}/${system_name}.ab
  
  echo "[$BASE_NAME]: reading '${out_dir}/${system_name}.ab' file"
  # using v1 alpha, create the supporting wrapper, makefile, and verification *.c files
  java -jar ${BASE_DIR}/lib/alpha.glue.v1.jar \
    ${out_dir}/${system_name}.ab \
    $out_dir
  assert_file_created ${out_dir}/${system_name}-wrapper.c
  assert_file_created ${out_dir}/${system_name}_verify.c
  assert_file_created ${out_dir}/Makefile
fi

#######################################################################
# build generated C file with make
#######################################################################

if [[ -n "$MAKE" && -z "$simplify" ]]; then
  echo "[$BASE_NAME]: building with make"
  make -C $out_dir
elif [[ -n "$MAKE" && -n "$simplify" ]]; then
  echo "[$BASE_NAME]: skipping make step since -s was passed"
fi
